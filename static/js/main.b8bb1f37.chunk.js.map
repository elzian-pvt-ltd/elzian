{"version":3,"sources":["serviceWorker.js","components/navBar.jsx","components/home.jsx","components/notFound.jsx","services/logService.js","services/httpService.js","services/authService.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","props","collapseOnSelect","expand","bg","variant","className","Brand","href","Toggle","aria-controls","Collapse","id","Home","src","Component","NotFound","init","Sentry","dsn","log","error","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","apiEndPointUrl","email","password","a","http","data","localStorage","setItem","getJwt","getItem","login","loginWithJwt","logout","removeItem","getCurrentUser","jwtDecode","ex","App","state","currentUser","auth","this","setState","Fragment","Switch","Route","path","component","Redirect","exact","from","to","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yICqDSC,G,MAlEA,SAACC,GAEd,OACE,kBAAC,IAAD,CACEC,kBAAgB,EAChBC,OAAO,KACPC,GAAG,OACHC,QAAQ,OACRC,UAAU,UAEV,kBAAC,IAAsBC,MAAvB,CAA6BC,KAAK,KAAlC,eAGA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,0BAC5C,kBAAC,IAAsBC,SAAvB,CAAgCC,GAAG,yBACjC,kBAAC,IAAD,CAAoBN,UAAU,gBCavBO,G,6KA7BX,OACE,yBAAKP,UAAU,kBACb,yBAAKA,UAAU,iBACb,4BACE,yBAAKA,UAAU,WAAWQ,IAAI,+BAEhC,4BACE,2BACG,IACD,sDACG,KAEP,4BACE,6CAEF,4BACE,yBAAKR,UAAU,WAAWQ,IAAI,oCAC9B,uBAAGN,KAAK,4BACN,yBAAKF,UAAU,WAAWQ,IAAI,iCAEhC,yBAAKR,UAAU,WAAWQ,IAAI,qCAC9B,yBAAKR,UAAU,WAAWQ,IAAI,0C,GAvBvBC,cCQJC,G,MARE,WACf,OACE,yBAAKV,UAAU,uBACb,iD,2DCSS,OAAEW,KAZjB,WACEC,IAAY,CACVC,IACE,+EASiBC,IALvB,SAAaC,GAEXH,IAAwBG,KCP1BC,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAACJ,GAUrC,OAREA,EAAMG,UACNH,EAAMG,SAASE,QAAU,KACzBL,EAAMG,SAASE,OAAS,MAGxBC,EAAOP,IAAIC,GACXO,YAAM,gCAEDC,QAAQC,OAAOT,MAQT,OACbU,IAAKT,IAAMS,IACXC,KAAMV,IAAMU,KACZC,IAAKX,IAAMW,IACXC,OAAQZ,IAAMY,OACdC,OAVF,SAAgBC,GACdd,IAAMe,SAASC,QAAQC,OAAO,gBAAkBH,ICb5CI,E,MAAwBA,eAAiB,Q,4CAKxC,WAAqBC,EAAOC,GAA5B,iBAAAC,EAAA,sEACuBC,EAAKZ,KAAKQ,EAAgB,CAAEC,QAAOC,aAD1D,gBACSN,EADT,EACGS,KACRC,aAAaC,QANE,QAMgBX,GAF1B,4C,sBAYA,SAASY,IACd,OAAOF,aAAaG,QAjBL,SAEjBL,EAAKT,OAAOa,KA2BG,OACbE,MA1BK,SAAP,qCA2BEC,aAtBK,SAAsBf,GAC3BU,aAAaC,QAVE,QAUgBX,IAsB/BgB,OApBK,WACLN,aAAaO,WAbE,UAiCfC,eAbK,WACL,IACE,IAAMlB,EAAMU,aAAaG,QAtBZ,SAuBb,OAAOM,IAAUnB,GAEjB,MAAOoB,GACP,OAAO,OAQTR,UCIaS,E,4MA9BbC,MAAQ,CACNC,YAAa,I,kEAGb,IAAMA,EAAcC,EAAKN,iBACzBO,KAAKC,SAAS,CAAEH,YAAaA,M,+BAG7B,OACE,kBAAC,IAAMI,SAAP,KACE,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAQJ,YAAaE,KAAKH,MAAMC,cAChC,0BAAMrD,UAAU,IACd,kBAAC0D,EAAA,EAAD,KAIE,kBAACC,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWnD,IACnC,kBAACiD,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWtD,IAG/B,kBAACuD,EAAA,EAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,iB,GAtBtBxD,aCJlByD,IAASC,OACP,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SRsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACL+D,QAAQ/D,MAAMA,EAAMgE,a","file":"static/js/main.b8bb1f37.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport \"../App.css\";\r\n\r\nconst NavBar = (props) => {\r\n  //console.log(props.currentUser);\r\n  return (\r\n    <ReactBootstrap.Navbar\r\n      collapseOnSelect\r\n      expand=\"lg\"\r\n      bg=\"dark\"\r\n      variant=\"dark\"\r\n      className=\"navbar\"\r\n    >\r\n      <ReactBootstrap.Navbar.Brand href=\"/\">\r\n        E l z i a n\r\n      </ReactBootstrap.Navbar.Brand>\r\n      <ReactBootstrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <ReactBootstrap.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <ReactBootstrap.Nav className=\"mr-auto\">\r\n          {/* <NavLink className=\"nav-link\" to=\"/home\">\r\n            Home\r\n          </NavLink> */}\r\n          {/* <NavLink className=\"nav-link\" to=\"/newproject\">\r\n            New Project\r\n          </NavLink>\r\n          <NavLink className=\"nav-link\" to=\"/myprojects\">\r\n            My Projects\r\n          </NavLink>\r\n          <NavLink className=\"nav-link\" to=\"/chatbox\">\r\n            Chat Box\r\n          </NavLink>\r\n          <NavLink className=\"nav-link\" to=\"/chatbox\">\r\n            Conference Room\r\n          </NavLink>\r\n          <NavLink className=\"nav-link\" to=\"/contact\">\r\n            Contact Us\r\n          </NavLink> */}\r\n        </ReactBootstrap.Nav>\r\n        {/* <ReactBootstrap.Nav>\r\n          {props.currentUser && (\r\n            <React.Fragment>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"#\">\r\n                  Hi {props.currentUser.name} !\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to=\"/logout\">\r\n                  Log out\r\n                </NavLink>\r\n              </li>\r\n            </React.Fragment>\r\n          )}\r\n          {!props.currentUser && (\r\n            <React.Fragment>\r\n              <NavLink className=\"nav-link\" to=\"/login\">\r\n                Log In\r\n              </NavLink>\r\n              <NavLink className=\"nav-link\" to=\"/register\">\r\n                Register\r\n              </NavLink>\r\n            </React.Fragment>\r\n          )}\r\n        </ReactBootstrap.Nav> */}\r\n      </ReactBootstrap.Navbar.Collapse>\r\n    </ReactBootstrap.Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/home.css\";\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home-container\">\r\n        <div className=\"feature-image\">\r\n          <h1>\r\n            <img className=\"mainlogo\" src=\"images/logo/mainlogo.jpeg\" />\r\n          </h1>\r\n          <h1>\r\n            <i>\r\n              {\" \"}\r\n              <b>E l z i a n (pvt) Ltd.</b>\r\n            </i>{\" \"}\r\n          </h1>\r\n          <h5>\r\n            <i>Be The Change</i>\r\n          </h5>\r\n          <h1>\r\n            <img className=\"mainlogo\" src=\"images/logo/elziansoftware.jpeg\" />\r\n            <a href=\"https://agro.elzian.com/\">\r\n              <img className=\"mainlogo\" src=\"images/logo/elzianagro.jpeg\" />\r\n            </a>\r\n            <img className=\"mainlogo\" src=\"images/logo/elzianmarketing.jpeg\" />\r\n            <img className=\"mainlogo\" src=\"images/logo/elzianfinance.jpeg\" />\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"../styles/notfound.css\";\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"not-found-container\">\r\n      <h1>Page Not Found</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import * as Sentry from \"@sentry/browser\";\r\n\r\nfunction init() {\r\n  Sentry.init({\r\n    dsn:\r\n      \"https://9205c1a392e445b38046cc36a656a984@o384146.ingest.sentry.io/5224680\",\r\n  });\r\n}\r\n\r\nfunction log(error) {\r\n  //console.error(error);\r\n  Sentry.captureException(error); //log server errors in sentry\r\n}\r\n\r\nexport default { init, log };\r\n","import axios from \"axios\";\r\nimport logger from \"./logService\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n  const expectedError =\r\n    error.response &&\r\n    error.response.status >= 400 &&\r\n    error.response.status < 500;\r\n  if (!expectedError) {\r\n    //UnExpted Error\r\n    logger.log(error); //Log the error in sentry refactored\r\n    toast(\"An unexpected error occured\");\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nfunction setJwt(jwt) {\r\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n  //Whenever you are going to send a request to the backend, send this header\r\n}\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  setJwt,\r\n};\r\n","//Authentication(login and logout)\r\nimport http from \"./httpService\";\r\nimport config from \"./config.json\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst apiEndPointUrl = config.apiEndPointUrl + \"/auth\";\r\nconst tokenKey = \"token\";\r\n\r\nhttp.setJwt(getJwt());\r\n\r\nexport async function login(email, password) {\r\n  const { data: jwt } = await http.post(apiEndPointUrl, { email, password });\r\n  localStorage.setItem(tokenKey, jwt); //Save the token in LS\r\n}\r\n\r\nexport function loginWithJwt(jwt) {\r\n  localStorage.setItem(tokenKey, jwt); //Save the token in localStorage and create a seperate login with jwt if any immidiate case we want to import a single function in another module\r\n}\r\nexport function logout() {\r\n  localStorage.removeItem(tokenKey); //Removing token from localstorage\r\n}\r\n\r\nexport function getJwt() {\r\n  return localStorage.getItem(tokenKey);\r\n}\r\n\r\nexport function getCurrentUser() {\r\n  try {\r\n    const jwt = localStorage.getItem(tokenKey); //Decoding the json web token user logged in\r\n    return jwtDecode(jwt);\r\n    //console.log(currentUser);\r\n  } catch (ex) {\r\n    return null;\r\n  }\r\n}\r\nexport default {\r\n  login,\r\n  loginWithJwt,\r\n  logout,\r\n  getCurrentUser,\r\n  getJwt,\r\n};\r\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport jwtDecode from \"jwt-decode\";\nimport NavBar from \"./components/navBar\";\nimport Home from \"./components/home\";\nimport NotFound from \"./components/notFound\";\nimport auth from \"./services/authService\";\n\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    currentUser: {},\n  };\n  componentDidMount() {\n    const currentUser = auth.getCurrentUser();\n    this.setState({ currentUser: currentUser });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <ToastContainer />\n        <NavBar currentUser={this.state.currentUser} />\n        <main className=\"\">\n          <Switch>\n            {/* <Route path=\"/register\" component={Register} />\n            <Route path=\"/login\" component={LoginForm} />\n            <Route path=\"/logout\" component={Logout} /> */}\n            <Route path=\"/notFound\" component={NotFound} />\n            <Route path=\"/home\" component={Home} />\n            {/* <ProtectedRoute exact path=\"/newproject\" component={NewProject} />\n            <ProtectedRoute exact path=\"/myprojects\" component={MyProjects} /> */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* <Redirect to=\"notFound\" /> */}\n          </Switch>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"font-awesome/css/font-awesome.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}